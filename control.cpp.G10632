#include "control.h"

const QPointF scoreTextPos = QPointF(50, 50);
const QPointF LifeBarPos = QPointF(300,100);

const int myBulletShootTimerItv = 300;
const int enemyBulletShootTimerItv = 2000;

const int allBulletMoveTimerItv = 10;
const int lifeSupplyMoveTimerItv = 10;

const int myPlaneMoveTimerItv = 30;
const int enemyPlaneMoveTimerItv = 50;
const int enemyPlaneGenerateTimerItv = 3000;
const int bossGenerateTimeItv = 8000;

Control::Control()
{
    screenSize = QApplication::desktop()->availableGeometry();
    setSceneRect(0,0,screenSize.width(),screenSize.height());

    //我方飞机初始化
    QString pixmap_myplane_url = ":/new/prefix1/images/myplane.png";
    QImage myplane_image(pixmap_myplane_url);
    if(myplane_image.isNull()){
        qDebug()<<"读取图片错误";
    }
    else{
        myplane_image.save(pixmap_myplane_url,"PNG");
    }
    this->myPlaneImageFile = ":/new/prefix1/images/myplane.png";
    this->myLife = 50;
    this->mySkill = 5;

    // 我方子弹初始化
    QString pixmap_mybullet_url = ":/new/prefix1/images/mybullet.png";
    QImage mybullet_image(pixmap_mybullet_url);
    if(mybullet_image.isNull()){
        qDebug()<<"读取图片错误";
    }
    else{
        mybullet_image.save(pixmap_mybullet_url,"PNG");
    }
    this->myBulletImageFile = ":/new/prefix1/images/mybullet.png";
    this->myBulletType = 0;
    this->myBulletPower = 1;

    //敌方飞机初始化
    QString pixmap_enemyplane_url = ":/new/prefix1/images/enemyplane.png";
    QImage enemyplane_image(pixmap_enemyplane_url);
    if(enemyplane_image.isNull()){
        qDebug()<<"读取图片错误";
    }
    else{
        enemyplane_image.save(pixmap_enemyplane_url,"PNG");
    }
    this->enemyPlaneImageFile = ":/new/prefix1/images/enemyplane.png";
    this->enemyLife = 1;

    //敌方子弹初始化
    QString pixmap_enemybullet_url = ":/new/prefix1/images/enemybullet.png";
    QImage enemybullet_image(pixmap_enemybullet_url);
    if(enemybullet_image.isNull()){
        qDebug()<<"读取图片错误";
    }
    else{
        enemybullet_image.save(pixmap_enemybullet_url,"PNG");
    }
    this->enemyBulletImageFile = ":/new/prefix1/images/enemybullet.png";
    this->enemyBulletPower = 1;

    //敌方boss初始化
    QString pixmap_boss_url = ":/new/prefix1/images/boss.png";
    QImage boss_image(pixmap_boss_url);
    if(boss_image.isNull()){
        qDebug()<<"读取图片错误";
    }
    else{
        boss_image.save(pixmap_boss_url,"PNG");
    }
    this->bossImageFile = ":/new/prefix1/images/boss.png";
    this->bossLife = 10;

    //敌方boss子弹初始化
    QString pixmap_bossbullet_url = ":/new/prefix1/images/bossbullet.png";
    QImage bossbullet_image(pixmap_bossbullet_url);
    if(bossbullet_image.isNull()){
        qDebug()<<"读取图片错误";
    }
    else{
        bossbullet_image.save(pixmap_bossbullet_url,"PNG");
    }
    this->bossBulletImageFile = ":/new/prefix1/images/bossbullet.png";
    this->bossBulletPower = 2;

    //补给初始化
    QString pixmap_lifesupply_url = ":/new/prefix1/images/lifesupply.png";
    QImage lifesupply_image(pixmap_lifesupply_url);
    if(lifesupply_image.isNull()){
        qDebug()<<"读取图片错误";
    }
    else{
        lifesupply_image.save(pixmap_lifesupply_url,"PNG");
    }
    this->lifeSupplyImageFile = ":/new/prefix1/images/lifesupply.png";
    this->supplyAddLife = 5;

    // 生命值
    lifeFrameBar = new QGraphicsRectItem(LifeBarPos.x(), LifeBarPos.y(), myLife*4, 10);
    lifeFrameBar->setPen(QPen(Qt::white));
    addItem(lifeFrameBar);
    lifeFrameBar->hide();
    lifeBar = new QGraphicsRectItem(LifeBarPos.x(), LifeBarPos.y(), myLife*4, 10);
    lifeBar->setBrush(QBrush(Qt::green));
    addItem(lifeBar);
    lifeBar->hide();

    // 遮罩面板
    QWidget *mask = new QWidget;
    mask->setPalette(QColor(0,0,0,80));
    mask->resize(width(),height());
    maskWidget = addWidget(mask);
    maskWidget->setPos(0,0);
    maskWidget->setZValue(1);
    maskWidget->hide();

    // 得分提示
    score = 0;
    scoreText = new QGraphicsTextItem;
    scoreText->setPos(scoreTextPos);
    scoreText->setHtml(tr("<font>SCORE: %1</font>").arg(score));
    scoreText->setFont(QFont("Courier"));
    addItem(scoreText);
    scoreText->hide();

    // 按钮初始化
    QPushButton *startGameBtm = new QPushButton("Start Game");
    startGameBtm->setFont(QFont("Algerian",18));
    startGameBtm->setStyleSheet("QPushButton{background: transparent; color: white;}"
                                "QPushButton:hover{color: red;}");
    connect(startGameBtm, SIGNAL(clicked()),this,SLOT(startGame()));
    startGameButton = addWidget(startGameBtm);
    startGameButton->setPos(width()/2, height()/2);
    startGameButton->setZValue(2);

    hasStarted = false;
}

//启动所有定时器
bool Control::startALLTimer()
{
    enemyBulletShootTimerId = startTimer(enemyBulletShootTimerItv);
    allBulletMoveTimerId = startTimer(allBulletMoveTimerItv);
    enemyPlaneMoveTimerId = startTimer(enemyPlaneMoveTimerItv);
    enemyPlaneGenerateTimerId = startTimer(enemyPlaneGenerateTimerItv);
    bossGenerateTimeId = startTimer(bossGenerateTimeItv);
    lifeSupplyMoveTimerId = startTimer(lifeSupplyMoveTimerItv);

    return true;
}

//关闭全局定时器
bool Control::killAllTimer()
{
    killTimer(myBulletShootTimerId);

    killTimer(enemyBulletShootTimerId);
    killTimer(allBulletMoveTimerId);
    killTimer(enemyPlaneMoveTimerId);
    killTimer(enemyPlaneGenerateTimerId);
    killTimer(bossGenerateTimeId);
    killTimer(lifeSupplyMoveTimerId);

    return true;
}

//定时器事件
void Control::timerEvent(QTimerEvent *event)
{
    if(event->timerId()==myPlaneWMoveTimerId)
        changeMyPlanePosition(myplane, myplane->x()+myPlaneWMove.x(), myplane->y()+myPlaneWMove.y());
    if(event->timerId()==myPlaneSMoveTimerId)
        changeMyPlanePosition(myplane, myplane->x()+myPlaneSMove.x(), myplane->y()+myPlaneSMove.y());
    if(event->timerId()==myPlaneAMoveTimerId)
        changeMyPlanePosition(myplane, myplane->x()+myPlaneAMove.x(), myplane->y()+myPlaneAMove.y());
    if(event->timerId()==myPlaneDMoveTimerId)
        changeMyPlanePosition(myplane, myplane->x()+myPlaneDMove.x(), myplane->y()+myPlaneDMove.y());

    if(event->timerId()==enemyBulletShootTimerId)   //敌机发射子弹
        shootEnemyBullets();
    if(event->timerId()==myBulletShootTimerId)      //发射子弹
        shootBullet();
    if(event->timerId()==allBulletMoveTimerId)      //移动子弹
    {
        updateMyBullets();
        updateEnemyBullets();
    }
    if(event->timerId()==lifeSupplyMoveTimerId)
        updateLifeSupply();
    if(event->timerId()==enemyPlaneMoveTimerId)     //更新敌机位置
        updateEnemyPlanes();
    if(event->timerId()==enemyPlaneGenerateTimerId) //随机生成敌机
    {
        for(int i=0;i<2;i++)
            generateEnemyPlane();
    }
    if(event->timerId()==bossGenerateTimeId)        //随机生成boss
            generateBoss();
}

//按下按钮事件
void Control::keyPressEvent(QKeyEvent *event)
{
    if (!event->isAutoRepeat())
    {
        //方向键
        if(event->key() == Qt::Key_W)
        {
            if(myPlaneWMove==QPointF(0,0))
                myPlaneWMoveTimerId = startTimer(30);
            myPlaneWMove = QPointF(0, -10);
        }
        else if (event->key() == Qt::Key_S)
        {
            if(myPlaneSMove==QPointF(0,0))
                myPlaneSMoveTimerId = startTimer(30);
            myPlaneSMove = QPointF(0, 10);
        }
        else if (event->key() == Qt::Key_A)
        {
            if(myPlaneAMove==QPointF(0,0))
                myPlaneAMoveTimerId = startTimer(30);
            myPlaneAMove = QPointF(-10, 0);
        }
        else if (event->key() == Qt::Key_D)
        {
            if(myPlaneDMove==QPointF(0,0))
                myPlaneDMoveTimerId = startTimer(30);
            myPlaneDMove = QPointF(10, 0);
        }

        else if (event->key() == Qt::Key_J)
            myBulletShootTimerId = startTimer(myBulletShootTimerItv);
        else if(event->key()==Qt::Key_Space)
            pauseGame();
        else if(event->key()==Qt::Key_Y)
            retryGame();
    }
}

//释放按钮事件
void Control::keyReleaseEvent(QKeyEvent *event)
{
    if(!event->isAutoRepeat())
    {
        if(event->key() == Qt::Key_W)
        {
            myPlaneWMove = QPointF(0, 0);
            killTimer(myPlaneWMoveTimerId);
        }
        if (event->key() == Qt::Key_S)
        {
            myPlaneSMove = QPointF(0, 0);
            killTimer(myPlaneSMoveTimerId);
        }
        if (event->key() == Qt::Key_A)
        {
            myPlaneAMove = QPointF(0, 0);
            killTimer(myPlaneAMoveTimerId);
        }
        if (event->key() == Qt::Key_D)
        {
            myPlaneDMove = QPointF(0, 0);
            killTimer(myPlaneDMoveTimerId);
        }

        if (event->key() == Qt::Key_J)
            killTimer(myBulletShootTimerId);
    }
}

//改变我方飞机位置
bool Control::changeMyPlanePosition(MyPlane *myplane, int newX, int newY)
{
    //位置不发生改变直接返回true
    if(myplane->x() ==newX && myplane->y() == newY)
        return true;

    //边界检查
    if(newX<0 || newX>width() || newY<0 || newY>height())
    {
         return true;
    }

    //与补给碰撞
    for(vector<LifeSupply*>::iterator it = lifesupplys.begin(); it!=lifesupplys.end(); )
    {
        if(myplane->collidesWithItem(*it))
        {
            int AddLife = min(myplane->life+supplyAddLife, myLife) - myplane->life;
            updateBar(lifeBar, lifeFrameBar, LifeBarPos, +AddLife, Qt::green);
            removeItem(*it);
            delete *it;
            it = lifesupplys.erase(it);
        }
        else
            it++;
    }

    //与飞机相撞
    for (vector<EnemyPlane*>::iterator it = enemyplanes.begin(); it != enemyplanes.end(); )
    {
        bool alive = true; //检查it是否存活
        if (myplane->collidesWithItem(*it))
        {
            alive = (*it)->crash(this);
            updateBar(lifeBar, lifeFrameBar, LifeBarPos, -2, QBrush(Qt::green));
        }

        if (alive)
            it++;
        else //若飞机坠毁，则将此飞机去掉
        {
            delete *it;
            it = enemyplanes.erase(it);
        }
    }

    //移动
    if(myplane->life > 0)//生命值需大于0
    {
        myplane->moveBy(newX-myplane->x(), newY-myplane->y());//移动
        myplane->update();//刷新屏幕
    }

    return myplane->life > 0;
}

//改变敌方飞机位置
bool Control::changeEnemyPlanePosition(EnemyPlane *enemyplane, int newX, int newY)
{
    //位置不发生改变直接返回true
    if(enemyplane->x() ==newX && enemyplane->y() == newY)
        return true;

    //左右边界检查
    if(newX<0 || newX>width())
    {
        enemyplane->changeXdir();//改变敌机左右方向
        return true;
    }

    //上下边界检查
    if(newY<0 || newY>height())
    {
        if (newY>height())
        {
            myplane->crash(this);
            enemyplane->delScreen(this);//超出下界删除
            return false;
        }
        else
            return true;
    }

    //与我方飞机相撞
    if (enemyplane->collidesWithItem(myplane))
    {
        enemyplane->delScreen(this);
        updateBar(lifeBar, lifeFrameBar, LifeBarPos, -2, QBrush(Qt::green));
        return false;
    }

    //移动
    if(enemyplane->life > 0)//生命值需大于0
    {
        enemyplane->moveBy(newX-enemyplane->x(), newY-enemyplane->y());//移动
        enemyplane->update();//刷新屏幕
    }

    return enemyplane->life > 0;
}

//全局更新子弹位置
bool Control::changeBulletPosition(Bullet * bullet, int newX, int newY)
{
    //检查位置是否有变化
    if (bullet->x() == newX && bullet->y() == newY)
        return true;

    /* 检查子弹是否击中某一飞机 */
    // 首先检查玩家飞机
    if (bullet->part==ENEMY && bullet->collidesWithItem(myplane))
    {
        bullet->hit(this);
        myplane->crash(this);
        updateBar(lifeBar, lifeFrameBar, LifeBarPos, -1, QBrush(Qt::green));
        if(myplane->life<=0)
            loseGame();
    }
    // 然后检查敌机：若敌机已经没有生命值，就从enemyplanes中删去
    else if(bullet->part==ME)
    {   
        for (vector<EnemyPlane*>::iterator it = enemyplanes.begin(); it != enemyplanes.end(); )
        {
            bool alive = true;
            if (bullet->collidesWithItem(*it))
            {
                bullet->hit(this);
                alive = (*it)->crash(this);
                myplane->skill++;
//                updateBar(skillBar, skillFrameBar, SkillBarPos, +2, QBrush(Qt::blue));
//                score++;
//                scoreText->setHtml(tr("<font color=white>SCORE: %1</font>").arg(score));
            }

            if(alive)
                it++;
            else
            {
                delete *it;
                it = enemyplanes.erase(it);
                /* 25%的概率掉落生命补给 */
                srand(time(NULL));
                if(rand()%4==0)
                {
                    generateLifeSupply(bullet->x(), bullet->y());
                }
            }
        }
    }

    /* 若子弹还具有杀伤力则更新位置并同步屏幕 */
    if (bullet->power > 0)
    {
        /* 若此时子弹试图打出边界，则销毁子弹 */
        if (newX <= 0 || newX >= width() || newY <= 0 || newY >= height())
        {
            bullet->delScreen(this);
            return false;
        }
        bullet->synScreen(this);
        bullet->moveBy(newX-bullet->x(), newY-bullet->y());
        bullet->update();
    }

    return bullet->power>0;
}

//全局更新补给位置
bool Control::changeLifeSupplyPosition(LifeSupply *lifesupply, int newX, int newY)
{
    /* 检查位置是否有变化，无变化则返回true */
    if (lifesupply->x() == newX && lifesupply->y() == newY)
        return true;

    //边界检查
    if(newX<0 || newX>width() || newY<0 || newY>height())
    {
        if (newY>height())
        {
            lifesupply->delScreen(this);//超出下界删除
            return false;
        }
        else
            return true;
    }

    //与我方飞机相撞
    if (lifesupply->collidesWithItem(myplane))
    {
        myplane->life = min(myplane->life + supplyAddLife, myLife);
        updateBar(lifeBar, lifeFrameBar, LifeBarPos, supplyAddLife, Qt::green);
        lifesupply->delScreen(this);
        return false;
    }

    if(lifesupply->energy>0)
    {
        // 若此时补给试图打出边界，则销毁补给
        if (newX <= 0 || newX >= width() || newY <= 0 || newY >= height())
        {
            lifesupply->delScreen(this);
            return false;
        }
        lifesupply->synScreen(this);
        lifesupply->moveBy(newX-lifesupply->x(), newY-lifesupply->y());
        lifesupply->update();
    }

    return lifesupply->energy>0;
}

//更新血量条
void Control::updateBar(QGraphicsRectItem *bar, QGraphicsRectItem *frameBar, const QPointF &pos, qreal var, const QBrush &brush)
{
    var = var * 4;
    qreal wid = bar->rect().width();
    if(var<0)
    {
        wid = max((qreal)0, wid + var);
    }
    else
    {
        wid = min(frameBar->rect().width(), wid+var);
    }
    bar->setRect(pos.x(), pos.y(), wid, bar->rect().height());
    bar->setBrush(brush);
    bar->update();
}

//玩家飞机发射子弹
void Control::shootBullet()
{
    /* 玩家飞机发出新子弹，新子弹在玩家飞机炮管外的位置 */
    if(myBulletType==0)
    {
        Bullet *bullet = new Bullet(ME, myplane->x()+40, myplane->y()-38,
                                    myBulletImageFile, QPointF(0,-3), myBulletPower);
        mybullets.push_back(bullet);
        addItem(bullet);
    }
    else if(myBulletType==1)
    {
        Bullet *bullet1 = new Bullet(ME, myplane->x()+40, myplane->y()-38,
                                    myBulletImageFile, QPointF(-3,-3), myBulletPower);
        mybullets.push_back(bullet1);
        bullet1->setRotation(-45);
        addItem(bullet1);

        Bullet *bullet2 = new Bullet(ME, myplane->x()+40, myplane->y()-38,
                                    myBulletImageFile, QPointF(0,-3), myBulletPower);
        mybullets.push_back(bullet2);
        addItem(bullet2);

        Bullet *bullet3 = new Bullet(ME, myplane->x()+40, myplane->y()-38,
                                    myBulletImageFile, QPointF(3,-3), myBulletPower);
        mybullets.push_back(bullet3);
        bullet3->setRotation(45);
        addItem(bullet3);
    }
}

//更新我的子弹位置
void Control::updateMyBullets()
{
    //对所有子弹循环
    for (vector<Bullet*>::iterator it = mybullets.begin(); it != mybullets.end(); )
    {
        pair<int, int> loc = (*it)->updatePosition();//更新坐标
        if (changeBulletPosition(*it, loc.first, loc.second))
            it++;
        else
        {
            delete *it;
            it = mybullets.erase(it);
        }
    }
}

//更新补给位置
void Control::updateLifeSupply()
{
    //对所有补给循环
    for (vector<LifeSupply*>::iterator it = lifesupplys.begin(); it != lifesupplys.end(); )
    {
        pair<int, int> loc = (*it)->updatePosition(); //更新坐标
        if (changeLifeSupplyPosition(*it, loc.first, loc.second))
            it++;
        else
        {
            delete *it;
            it = lifesupplys.erase(it);
        }
    }
}

//随机生成boss
bool Control::generateBoss()
{
    srand(time(NULL));
    QPixmap pixmap(QPixmap(QString::fromStdString(bossImageFile)));
    int cnt = 0;
    int x = rand() % (int)width(); //敌机最左端位置
    for(cnt=0;cnt<100;cnt++)
    {
        bool flag = true; //此位置是否合法
        for(auto iter:enemyplanes)
        {
            if(iter->sceneBoundingRect().intersects(QRectF(x, 0, pixmap.width(), pixmap.height())))
            {
                flag = false;
                break;
            }
        }

        if(flag)
            break;
        else
            x = rand() % (int)width();
    }

    /* 若生成100次随机都未能找到合适的位置则退出 */
    if(cnt>=100)
        return false;

    /* 新增敌机 */
    EnemyPlane *enemy = new EnemyPlane(x, 0, bossImageFile, this, BOSS, bossLife);
    enemyplanes.push_back(enemy);
    return true;
}

//随机生成一架敌机
bool Control::generateEnemyPlane()
{
    /* 随机在第一行生成敌机 */
    srand(time(NULL));//初始化时间种子
    QPixmap pixmap(QPixmap(QString::fromStdString(enemyPlaneImageFile)));
    int cnt = 0;
    int x = rand() % (int)width(); //敌机最左端位置
    for(cnt=0;cnt<100;cnt++)
    {
        bool flag = true; //此位置是否合法
        for(auto iter : enemyplanes)//对vector循环
        {
//            QApplication::processEvents();
            if(iter->sceneBoundingRect().intersects(QRectF(x, 0, pixmap.width(), pixmap.height())))
            {
                flag = false;
                break;
            }
        }

        if(flag)
            break;
        else
            x = rand() % (int)width();
    }

    /* 若生成100次随机都未能找到合适的位置则退出 */
    if(cnt>=100)
        return false;

    /* 新增敌机 */
    EnemyPlane *enemy = new EnemyPlane(x, 0, enemyPlaneImageFile, this, ORD, enemyLife);
    enemyplanes.push_back(enemy);
    return true;
}

//生成生命包
bool Control::generateLifeSupply(int x, int y)
{
    LifeSupply *lifeSupply = new LifeSupply(x, y, lifeSupplyImageFile, supplyAddLife);
    lifesupplys.push_back(lifeSupply);
    addItem(lifeSupply);
    return true;
}

//根据敌机方向更新敌机位置
bool Control::updateEnemyPlanes()
{
    /* 若当前敌机少于1，则自动生成敌机，数目随机但小于3 */
    if (enemyplanes.size() < 1)
    {
        int genNum = rand() % 3;
        for (int i = 0; i < genNum; i++)
            generateEnemyPlane();
    }

    /* 所有敌机移动位置 */
    for (vector<EnemyPlane*>::iterator it = enemyplanes.begin(); it != enemyplanes.end(); )
    {
        pair<int, int> loc = (*it)->updatePostion();
        if (changeEnemyPlanePosition(*it, loc.first, loc.second))
            it++;
        else
            it = enemyplanes.erase(it);
    }

    return myplane->life > 0;
}

//敌机发射子弹
void Control::shootEnemyBullets()
{
    /* 仍存活的敌机发出新子弹，新子弹在敌机炮管外的位置 */
    for (vector<EnemyPlane*>::iterator iter = enemyplanes.begin(); iter != enemyplanes.end(); iter++)
    {
        cout << "life: " << (*iter)->life
             << " type = ord: " << ((*iter)->type == ORD)
             << " type = boss: " << ((*iter)->type == BOSS)
             << endl;
        if ((*iter)->life > 0)
        {
            if((*iter)->type==ORD)
            {
                Bullet *bullet = new Bullet(ENEMY, (*iter)->x()+(*iter)->pixmap().width()/2, (*iter)->y()+(*iter)->pixmap().height()-15,
                                        enemyBulletImageFile, QPointF(0,1), enemyBulletPower);
                enemybullets.push_back(bullet);
                addItem(bullet);
            }
            else if((*iter)->type==BOSS)
            {
                Bullet *bullet0 = new Bullet(ENEMY, (*iter)->x()+(*iter)->pixmap().width()/2, (*iter)->y()+(*iter)->pixmap().height()-15,
                                     bossBulletImageFile, QPointF(0,1), bossBulletPower);
                enemybullets.push_back(bullet0);
                addItem(bullet0);

                Bullet *bullet1 = new Bullet(ENEMY, (*iter)->x()+(*iter)->pixmap().width()/2, (*iter)->y()+(*iter)->pixmap().height()-15,
                                     bossBulletImageFile, QPointF(-1,1), bossBulletPower);
                bullet1->setRotation(45);
                enemybullets.push_back(bullet1);
                addItem(bullet1);

                Bullet *bullet2 = new Bullet(ENEMY, (*iter)->x()+(*iter)->pixmap().width()/2, (*iter)->y()+(*iter)->pixmap().height()-15,
                                     bossBulletImageFile, QPointF(1,1), bossBulletPower);
                bullet2->setRotation(-45);
                enemybullets.push_back(bullet2);
                addItem(bullet2);
            }
        }
    }
}

//更新敌机子弹位置
void Control::updateEnemyBullets()
{
    for(vector<Bullet*>::iterator it = enemybullets.begin(); it!=enemybullets.end(); )
    {
        pair<int ,int> loc = (*it)->updatePosition();
        if(changeBulletPosition(*it, loc.first, loc.second))
            it++;
        else
        {
            delete *it;
            it = enemybullets.erase(it);
        }
    }
}

void Control::startGame()
{
    score = 0;
    scoreText->setHtml(tr("<font color=white>SCORE: %1</font>").arg(score));

    hasStarted = true;
    startGameButton->hide();

    //显示血条、得分
    scoreText->show();
    lifeFrameBar->show();
    lifeBar->setRect(LifeBarPos.x(), LifeBarPos.y(), myLife*4, lifeBar->rect().height());
    lifeBar->setBrush(Qt::green);
    lifeBar->update();
    lifeBar->show();


    myPlaneWMove = QPointF(0, 0);
    myPlaneSMove = QPointF(0, 0);
    myPlaneAMove = QPointF(0, 0);
    myPlaneDMove = QPointF(0, 0);

    //启动全局定时器
    startALLTimer();

    //添加玩家飞机
    myplane = new MyPlane(width() / 2, height() / 2, myPlaneImageFile, this, myLife, mySkill);
    myplane->synScreen(this);
}

//暂停游戏
void Control::pauseGame()
{
    if(hasStarted)
        if(!isPause)
        {
            isPause = true;
            killAllTimer();
            maskWidget->show();
        }
        else
        {
            isPause = false;
            startALLTimer();
            maskWidget->hide();
        }
}

//重新开始游戏
void Control::retryGame()
{
    if(myplane->life>=0)
        removeItem(myplane);

    for(auto iter:enemyplanes)
    {
        removeItem(iter);
        delete iter;
    }
    enemyplanes.clear();

    for(auto it:mybullets)
    {
        removeItem(it);
        delete it;
    }
    mybullets.clear();

    for(auto it:enemybullets)
    {
        removeItem(it);
        delete it;
    }
    enemybullets.clear();

    for(auto it:lifesupplys)
    {
        removeItem(it);
        delete it;
    }
    lifesupplys.clear();

//    gameLostText->hide();
//    retryGameButton->hide();
//    helpGameButton->hide();
//    quitGameButton->hide();
    startGame();
}

//游戏结束
void Control::loseGame()
{
    killAllTimer();
    maskWidget->show();
//    gameLostText->setHtml(tr("<font color=white>Game Over, Your Score: %1</font>").arg(score));
//    gameLostText->show();
//    retryGameButton->show();
//    helpGameButton->show();
//    quitGameButton->show();
}

//退出游戏
void Control::exitGame()
{
    exit(0);
}
